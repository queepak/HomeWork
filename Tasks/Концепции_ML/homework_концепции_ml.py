# -*- coding: utf-8 -*-
"""Homework_Концепции_ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qE5SWHutdLfUCe9U0hw5WHurdyhulBQj

# Основные концепции Machine Learning. Домашняя работа
"""

### Тут нужно сделать импорты всех необходимых библиотек ###

import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt

### Здесь требуется загрузить датасет phones.csv ###

phones = pd.read_csv('1.8_phones.csv')
phones.head()

### Опционально: используя matplotlib, можно сделать визуализацию загруженного датасета ###

fig = plt.figure(figsize=(7, 7)) # создаем картинку
ax = plt.axes()

# помещаем точки на график
ax.scatter(phones["year"], phones["price"], s=100)

# отображаем картинку
plt.show()

"""Задание 1: обучить модель регрессии"""

from sklearn.linear_model import LinearRegression
### Тут нужно выгрузить в соответствующие переменные выбранные признаки ###
X = phones[["disk","year"]]
y = phones["price"]

reg = LinearRegression().fit(X, y)

### Здесь следует запустить процесс обучения ###
### и продемонстрировать работоспобность обученной модели ###

[b] = reg.coef_
a = reg.intercept_

def reg_prediction(dim_1):
    return a + b * dim_1

reg.predict(X[0:1])[0]

fig = plt.figure(figsize=(10, 10)) # создаем картинку
ax = plt.axes()

# помещаем точки на график
ax.scatter(phones["year"], phones["price"], s=100)
# помещаем предсказания
ax.plot([X.year.min(), X.year.max()], [reg_prediction(X.year.min()), reg_prediction(X.year.max())], c="red")

# отображаем картинку
plt.show()

"""Задание 2: обучить модель классификации"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import export_text
### Тут нужно выгрузить в соответствующие переменные выбранные признаки ###
X = phones[["disk","year"]]
y = phones["os"]

cl = DecisionTreeClassifier().fit(X, y)
print(export_text(cl))

### Здесь следует запустить процесс обучения ###
### и продемонстрировать работоспобность обученной модели ###

cl.predict(X[7:8])[0], y[7]

"""Задание 3: обучить модель кластеризации"""

fig = plt.figure(figsize=(10, 10)) # создаем картинку

markers = {"Android": "o", "iOS": "*"}
for d1, d2, l in zip(phones.year, phones.price, phones.os):
    plt.scatter(d1, d2, s=200, marker=markers[l])

# отображаем картинку
plt.show()

from sklearn.cluster import KMeans

### Тут нужно выгрузить в соответствующие переменные выбранные признаки ###
X = phones[["year", "price"]]

# создаем модель для кластеризации
clust = KMeans(n_clusters=3).fit(X)

### Здесь следует запустить процесс обучения ###
### и продемонстрировать работоспобность обученной модели ###
[c1, c2, c3] = clust.cluster_centers_

clust.cluster_centers_

fig = plt.figure(figsize=(10, 10)) # создаем картинку

markers = {"Android": "o", "iOS": "*"}
for d1, d2, l in zip(phones.year, phones.price, phones.os):
    plt.scatter(d1, d2, s=250, marker=markers[l])

# добавляем информацию о центрах кластеров
plt.scatter(c1[0], c1[1], s=250, marker="x", c="black")
plt.scatter(c1[0], c1[1], s=250 * 1e2, c="black", alpha=0.1)

plt.scatter(c2[0], c2[1], s=250, marker="x", c="black")
plt.scatter(c2[0], c2[1], s=250 * 1e2, c="black", alpha=0.1)

plt.scatter(c3[0], c3[1], s=250, marker="x", c="black")
plt.scatter(c3[0], c3[1], s=250 * 3.5e2, c="black", alpha=0.1)

# отображаем картинку
plt.show()